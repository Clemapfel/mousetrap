### SIGNALS ###

# table header
ALIASES += signals="|signal id|signature|emitted when...|^^|---|---|---|"

# data_t name
ALIASES += Data_t="(Data_t)"

# signal row
# param 1: id
# param 2: instance
# param 3: return type
# param 4: description
ALIASES += signal_row{4}="| `\1` | `(\2&, \Data_t) -> \3` | \4 |"

# signal row
# param 1: id
# param 2: instance
# param 3: args
# param 4: return type
# param 5: description
ALIASES += signal_row_manual{5}="| `\1` | `(\2&, \4, \Data_t) -> \3` |\5 |"

ALIASES += signal_activate{1}="\signal_row{activate,\1,void,\signal_activate_brief}"
ALIASES += signal_activate_brief="Widget is activated, usually by pressing Enter while it is in focus or otherwise triggering interaction with it"

ALIASES += signal_startup{1}="\signal_row{startup,\1,void,\signal_startup_brief}"
ALIASES += signal_startup_brief="Application main loop starts, emitted after initialization of the backend but before the first render loop"

ALIASES += signal_shutdown{1}="\signal_row{shutdown,\1,void,\signal_shutdown_brief}"
ALIASES += signal_shutdown_brief="Application was requested to close, usually by the last window being closed"

ALIASES += signal_update{1}="\signal_row{update,\1,void,\signal_update_brief}"
ALIASES += signal_update_brief="exactly once per frame, when the display is updated"

ALIASES += signal_paint{1}="\signal_row{paint,\1,void,\signal_paint_brief}"
ALIASES += signal_paint_brief="when the displays render state is flushed"

ALIASES += signal_realize{1}="\signal_row{realize,\1,void,\signal_realize_brief}"
ALIASES += signal_realize_brief="Widget is realized, usually right before it is drawn for the first time"

ALIASES += signal_unrealize{1}="\signal_row{unrealize,\1,void,\signal_unrealize_brief}"
ALIASES += signal_unrealize_brief="Widget is unmapped and will no longer be drawn"

ALIASES += signal_destroy{1}="\signal_row{destroy,\1,void,\signal_destroy_brief}"
ALIASES += signal_destroy_brief="Widgets internal state is deallocated, calling Widget::~Widget() may not necessarily emit this signal"

ALIASES += signal_hide{1}="\signal_row{hide,\1,void,\signal_hide_brief}"
ALIASES += signal_hide_brief="Widget is actively hidden, leaves the visible area of the window, or its opacity is set to 0"

ALIASES += signal_show{1}="\signal_row{show,\1,void,\signal_show_brief}"
ALIASES += signal_show_brief="Widget is drawn for the first time after being realized"

ALIASES += signal_map{1}="\signal_row{map,\1,void,\signal_map_brief}"
ALIASES += signal_map_brief="Widget is mapped, this happens the first time it and all its parents become visible"

ALIASES += signal_unmap{1}="\signal_row{unmap,\1,void,\signal_unmap_brief}"
ALIASES += signal_unmap_brief="Widget and all of its parents become hidden"

ALIASES += signal_close_request{1}="\signal_row{close_request,\1,WindowCloseRequestResult,\signal_close_request_brief}"
ALIASES += signal_close_request_brief="Window is asked to close, usually by the user pressing the close button in the windows headerbar"

ALIASES += signal_activate_default_widget{1}="\signal_row{activate_default_widget,\1,void,\signal_activate_default_widget_brief}"
ALIASES += signal_activate_default_widget_brief="Default widget of a window is activated, see \link mousetrap::Window::set_default_widget Window::set_default_widget\endlink"

ALIASES += signal_activate_focused_widget{1}="\signal_row{activate_focuses_widget,\1,void,\signal_activate_focused_widget_brief}"
ALIASES += signal_activate_focused_widget_brief="Widget that is a child of Window and currently holds focus is activate"

ALIASES += signal_clicked{1}="\signal_row{clicked,\1,void,\signal_clicked_brief}"
ALIASES += signal_clicked_brief="Widget is clicked, usually by the user pressing the left mouse button while the cursor is above the widgets allocated area"

ALIASES += signal_toggled{1}="\signal_row{toggled,\1,void,\signal_toggled_brief}"
ALIASES += signal_toggled_brief="stateful widgets state changes, usually by the user interacting with it"

ALIASES += signal_changed{1}="\signal_row{changed,\1,void,\signal_changed_brief}"
ALIASES += signal_changed_brief="changed"

ALIASES += signal_undo{1}="\signal_row{undo,\1,void,\signal_undo_brief}"
ALIASES += signal_undo_brief="Undo is triggered, usually by the user pressing Control+Z "

ALIASES += signal_redo{1}="\signal_row{redo,\1,void,\signal_redo_brief}"
ALIASES += signal_redo_brief="Redo is triggered, usually by the user pressing Control+Y"

ALIASES += signal_selection_changed{1}="\signal_row_manual{selection_changed,\1,void,int32_t position\, int32_t n_items,\signal_selection_changed_brief}"
ALIASES += signal_selection_changed_brief="Selection state changes, usually because the user selected a different item or the internal list of items was otherwise modified"

ALIASES += signal_key_pressed{1}="\signal_row_manual{key_pressed,\1,bool,KeyValue keyval\, KeyCode keycode\, ModifierState modifier,\signal_key_pressed_brief}"
ALIASES += signal_key_pressed_brief="When a widget that has a KeyEventController connected captures a keypress event, usually from the user pressing a keyboard key"

ALIASES += signal_key_released{1}="\signal_row_manual{key_released,\1,void,KeyValue keyval\, KeyCode keycode\, ModifierState modifier,\signal_key_released_brief}"
ALIASES += signal_key_released_brief="When a widget that has a KeyEventController connected, captures a key release event, usually from the user seizing to press a keyboard key"

ALIASES += signal_modifiers_changed{1}="\signal_row_manual{modifiers_changed,\1,bool,KeyValue keyval\, KeyCode keycode\, ModifierState modifier,\signal_modifiers_changed_brief}"
ALIASES += signal_modifiers_changed_brief="When a modifier key (Alt, Shift, Control, etc.) is pressed or released"

ALIASES += signal_motion_enter{1}="\signal_row_manual{motion_enter,\1,void,double x\, double y,\signal_motion_enter_brief}"
ALIASES += signal_motion_enter_brief="When cursor enters the allocated area of a widget that has a MotionEventController connected"

ALIASES += signal_motion{1}="\signal_row_manual{motion,\1,void,double x\, double y,\signal_motion_brief}"
ALIASES += signal_motion_brief="Once per frame while cursor that is inside the allocated area of a widget that has a MotionEventController connected moves"

ALIASES += signal_motion_leave{1}="\signal_row{motion_leave,\1,void,\signal_motion_leave_brief}"
ALIASES += signal_motion_leave_brief="When cursor leaves the allocated area of a widget that has a MotionEventController connected"

ALIASES += signal_click_pressed{1}="\signal_row_manual{click_pressed,\1,void,int32_t n_press\, double x\, double y,\signal_click_pressed_brief}"
ALIASES += signal_click_pressed_brief="User pushes one mouse button or the touchscreen while the cursor is inside the allocated area of a widget that has a ClickEventController connected"

ALIASES += signal_click_released{1}="\signal_row_manual{click_released,\1,void,int32_t n_press\, double x\, double y,\signal_click_released_brief}"
ALIASES += signal_click_released_brief="User releaess a mouse button or the touchscreen while the cursor is inside the allocated area of a widget that has a ClickEventController connected"

ALIASES += signal_click_stopped{1}="\signal_row{click_stopped,\1,void,\signal_click_stopped_brief}"
ALIASES += signal_click_stopped_brief="A series of clicks end"

ALIASES += signal_kinetic_scroll_decelerate{1}="\signal_row_manual{signal_kinetic_scroll_decelerate,\1,void,double x_velocity\, double y_velocity,\signal_kinetic_scroll_decelerate_brief}"
ALIASES += signal_kinetic_scroll_decelerate_brief="Scroll actions ends but the kinetic inertia continues to scroll a widget that has a ScrollEventController connected. Not all widgets support kinetic scrolling"

ALIASES += signal_scroll_begin{1}="\signal_row{scroll_begin,\1,void,\signal_scroll_begin_brief}"
ALIASES += signal_scroll_begin_brief="Scroll action starts while the cursor is inisde the allocated area of a widget that has a ScrollEventController connected"

ALIASES += signal_scroll{1}="\signal_row_manual{scroll,\1,bool,double delta_x\, double delta_y,\signal_scroll_brief}"
ALIASES += signal_scroll_brief="Once per frame while the users is actively scrolling and the cursor is inside the allocated area of a widget that has a ScrollEventController connected"

ALIASES += signal_scroll_end{1}="\signal_row{scroll_end,\1,void,\signal_scroll_end_brief}"
ALIASES += signal_scroll_end_brief="Scroll action of a widget, that has a ScrollEventController connected, seizes"

ALIASES += signal_focus_gained{1}="\signal_row{focus_gained,\1,void,\signal_focus_gained_brief}"
ALIASES += signal_focus_gained_brief="First frame that a widget that has a FocusEventController connected grabs focus"

ALIASES += signal_focus_lost{1}="\signal_row{focus_lost,\1,void,\signal_focus_lost_brief}"
ALIASES += signal_focus_lost_brief="When a widget that has a FocusEventController connected looses focus"

ALIASES += signal_drag_begin{1}="\signal_row_manual{drag_begin,\1,void,double start_x\, double start_y,\signal_drag_begin_brief}"
ALIASES += signal_drag_begin_brief="Click-dragging starts while the cursor is inside the allocated area of a widget that has a DragEventController connected"

ALIASES += signal_drag{1}="\signal_row_manual{drag,\1,void,double offset_x\, double offset_y,\signal_drag_brief}"
ALIASES += signal_drag_brief="Once per frame while a drag action on a widget, that has a DragEventController connected, is active"

ALIASES += signal_drag_end{1}="\signal_row_manual{drag_end,\1,void,double offset_x\, double offest_y,\signal_drag_end_brief}"
ALIASES += signal_drag_end_brief="Drag action on a widget, that has a DragEventController connected, seizes"

ALIASES += signal_scale_changed{1}="\signal_row_manual{scale_changed,\1,void,double scale,\signal_scale_changed_brief}"
ALIASES += signal_scale_changed_brief="Distance between two fingers of a pinch-zoom touchscreen above a widget, that has a PinchZoomEventController connected, changes"

ALIASES += signal_rotation_changed{1}="\signal_row_manual{rotation_changed,\1,void,double angle_absolute_radians\, double angle_delta_radians,\signal_rotation_changed_brief}"
ALIASES += signal_rotation_changed_brief="Angle between the two fingers of a rotate touchscreen gesture above a widget, that has a RotateEventController connected, changes"

ALIASES += signal_text_changed{1}="\signal_row{text_changed,\1,void,\signal_text_changed_brief}"
ALIASES += signal_text_changed_brief="Textbuffer of the widget is modified"

ALIASES += signal_properties_changed{1}="\signal_row{properties_changed,\1,void,\signal_properties_changed_brief}"
ALIASES += signal_properties_changed_brief="Upper, lower, or step increment of an Adjustment changes"

ALIASES += signal_value_changed{1}="\signal_row{value_changed,\1,void,\signal_value_changed_brief}"
ALIASES += signal_value_changed_brief="Value of an Adjustment changes"

ALIASES += signal_render{1}="\signal_row_manual{render,\1,bool, GdkGLContext* context, context}"
ALIASES += signal_render_brief="When a RenderArea invokes its render cycle. All drawing happens inside the signal handler for this signal"

ALIASES += signal_resize{1}="\signal_row_manual{resize,\1,void,int32_t width\, int32_t height,\signal_resize_brief}"
ALIASES += signal_resize_brief="When a RenderArea changes viewport size"

ALIASES += signal_page_added{1}="\signal_row_manual{page_added,\1,void,void* _\, uint32_t page_index,\signal_page_added_brief}"
ALIASES += signal_page_added_brief="Page was added to a Notebook"

ALIASES += signal_page_removed{1}="\signal_row_manual{page_removed,\1,void,void* _\, uint32_t page_index,\signal_page_removed_brief}"
ALIASES += signal_page_removed_brief="Page was removed from a Notebook"

ALIASES += signal_page_reordered{1}="\signal_row_manual{page_reordered,\1,void,void* _\, uint32_t page_index,\signal_page_reordered_brief}"
ALIASES += signal_page_reordered_brief="Page position in a Notebook changes"

ALIASES += signal_page_selection_changed{1}="\signal_row_manual{page_selection_changed,\1,void,void* _\, uint32_t page_index,\signal_page_selection_changed_brief}"
ALIASES += signal_page_selection_changed_brief="Currently displayed page of a Notebook changes"

ALIASES += signal_wrapped{1}="\signal_row{wrapped,\1,void,\signal_wrapped_brief}"
ALIASES += signal_wrapped_brief="Value of a SpinButton over- or underflows. SpinButton::set_should_wrap needs to be enabled in order for this signal to be emitted"

ALIASES += signal_response{1}="\signal_row_manual{response,\1,void, int response,\signal_response_brief}"
ALIASES += signal_response_brief="User clicks one of the buttons of a FileDialog"

ALIASES += signal_pressed{1}="\signal_row_manual{pressed,\1,void,double x\, double y,\signal_pressed_brief}"
ALIASES += signal_pressed_brief="Long-press gesture above the allocated area of a widget, that has a LongPressEventController connected, is recognized"

ALIASES += signal_press_cancelled{1}="\signal_row{press_cancelled,\1,void,\signal_press_cancelled_brief}"
ALIASES += signal_press_cancelled_brief="Long-press gesture above a widget, that has a LongPressEventController connected, is interrupted"

ALIASES += signal_pan{1}="\signal_row_manual{pan,\1,void,PanDirection direction\, double offset,\signal_pan_brief}"
ALIASES += signal_pan_brief="Panning gesture above the allocated area of a widget, that has a PanEventController connected, is recognized"

ALIASES += signal_swipe{1}="\signal_row_manual{swipe,\1,void,double x_velocity\, double y_velocity,\signal_swipe_brief}"
ALIASES += signal_swipe_brief="Swipe gesture above the allocated area of a widget, that has a SwipeEventController connected, is recognized"

ALIASES += signal_stylus_down{1}="\signal_row_manual{stylus_down,\1,void,double x\, double y,\signal_stylus_down_brief}"
ALIASES += signal_stylus_down_brief="Stylus makes physical contact with the touchpad"

ALIASES += signal_stylus_up{1}="\signal_row_manual{stylus_up,\1,void,double x\, double y,\signal_stylus_up_brief}"
ALIASES += signal_stylus_up_brief="Stylus seizes to make physical contact with the touchpad"

ALIASES += signal_proximity{1}="\signal_row_manual{proximity,\1,void,double x\, double y,\signal_proximity_brief}"
ALIASES += signal_proximity_brief="Stylus enters the area recognized by the touchpad, but is not yet in physcial contact with it"

ALIASES += signal_scroll_child{1}="\signal_row_manual{scroll_child,\1,void,ScrollType scroll_type\, bool is_horizontal,\signal_scroll_child_brief}"
ALIASES += signal_scroll_child_brief="User requests scrolling of a ScrolledWindow via a keybinding"

ALIASES += signal_closed{1}="\signal_row{closed,\1,void,\signal_closed_brief}"
ALIASES += signal_closed_brief="A Popover window is closed"

ALIASES += signal_play{1}="\signal_row{play,\1,void,\signal_play_brief}"
ALIASES += signal_play_brief="A Music or Sound starts playback"

ALIASES += signal_stop{1}="\signal_row{stop,\1,void,\signal_stop_brief}"
ALIASES += signal_stop_brief="Playback of Music or Sound seizes, either by calling pause/stop or by the sound file ending while looping is deactivated"

ALIASES += signal_items_changed{1}="\signal_row_manual{items_changed,\1,void, int32_t position\, int32_t n_removed\, int32_t n_added,\signal_items_changed_brief}"
ALIASES += signal_items_changed_brief="An item was added or removed from a MenuModel"

ALIASES += signal_revealed{1}="\signal_row_manual{revealed,\1,void* _,void,\signal_revealed_brief}"
ALIASES += signal_revealed_brief="child of Revealer is visible, after the animation has finished"

ALIASES += signal_activated{1}="\signal_row_manual{activated,\1,void* _, void,\signal_activated_brief}"
ALIASES += signal_activated_brief="Action is triggered"

# signal collection for widgets
ALIASES += widget_signals{1}="|**Signals inherited from Widget**|||^^\signal_realize{Widget}^^\signal_unrealize{Widget}^^\signal_destroy{Widget}^^\signal_hide{Widget}^^\signal_show{Widget}^^\signal_map{Widget}^^\signal_unmap{Widget}"

### C++ CODE USAGE ###

# internal
ALIASES += for_internal_use_only="(for internal use only)"

# only_used_in_julia_binding
ALIASES += only_used_in_julia_binding="placeholder. Only used in Julia binding"

# signal_class_name
# param 1: signal name
ALIASES += signal_class_name{1}="has_signal\_\1"

# signal_with_data_f
# param 1: signal name
ALIASES += signal_with_data_f{1}="@brief expected signature of signal handler, forwards user-supplied data to function"

# signal_without_data_f
# param 1: signal name
ALIASES += signal_without_data_f{1}="@brief expected signature of signal handler"

# signal_see_emit_for_parameters
# param 1: signal name
ALIASES += signal_see_emit_for_parameters{1}="@see has_signal\_\1::emit_signal\_\1 for more information on signal handler arguments"

# signal_emit_brief
ALIASES += signal_emit_brief="@brief invoke signal handler manually"

# signal_id
# param 1: linke to gtk docs
ALIASES += signal_id{1}="@brief glib ID \internal^^@see \1"

# signal_connect_no_data
ALIASES += signal_connect{1}="@brief connect handler, will be invoked when signal is emitted^^@param f function with signature `\1`"

# signal_connect_data @brief
ALIASES += signal_connect_data{1}="@brief connect handler, will be invoked when signal is emitted. Data is passed to the signal handler function^^@param f function with signature `\1`^^@param data arbitrary data"

# signal_set_blocked
ALIASES += signal_set_blocked="^^@brief Set whether signal emission should trigger the signal handler^^@param b true if handler should be blocked, false otherwise"

# signal_get_blocked
ALIASES += signal_get_blocked="^^@brief get whether signal emission should trigger the signal handler^^@return true if handle is blocked, false otherwise"

# signal_disconnect
ALIASES += signal_disconnect="^^@brief disconnect the signal handler"

# signal_ctor
ALIASES += signal_ctor="@brief ctor protected \internal"

### MANUAL USAGE ###

# C++ Code Collapsible Region, uses Highligh.js for syntax highlighting by designating inside as snippet
ALIASES += cpp_code_begin"<div class\=\"cpp-code\"><details><summary>C++</summary>^^<div class=\"snippet\">"
ALIASES += cpp_code_end="</div></details></div>"

# Julia Code Collapsible Region, uses Highligh.js for syntax highlighting by designating inside as snippet
ALIASES += julia_code_begin="^^<div class\=\"julia-code\"><details><summary>Julia</summary>^^<div class=\"snippet\">"
ALIASES += julia_code_end="</div></details></div>"
ALIASES += julia_todo="\todo implement this^^<br>"

# Hint Collapsible Region
ALIASES += hint_begin="^^<div class\=\"hint\"><details><summary>Hint</summary>^^"
ALIASES += hint_end="</details></div>"

# incomplete sections
ALIASES += not_yet_complete="\todo this section is not yet complete"

# collapsible note
ALIASES += collapsible_note_begin{1}="\note <details><summary><b>\1</b></summary>"
ALIASES += collapsible_note_end="</details>"

# html detail
ALIASES += how_to_generate_this_image_begin="<center><details><summary><b>C++ Code to generate this Image</b></summary>"
ALIASES += how_to_generate_this_image_end="</details></center>"

# insert as inline link
ALIASES += a{1}="\link mousetrap::\1 `\1`\endlink"

# trivial file docs
ALIASES += \document_file{1}="\file \1 \1"

# not available in Julia
ALIASES += not_available_in_julia_binding="\note This function is not available in the Julia binding"