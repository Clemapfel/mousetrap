### SIGNALS ###

# table header
ALIASES += signals="|signal id|signature|emitted when...|^^|---|---|---|"

# data_t name
ALIASES += Data_t="(Data_t)"

# signal row
# param 1: id
# param 2: instance
# param 3: return type
# param 4: description
ALIASES += signal_row{4}="| `\1` | `(\2*, \Data_t) -> \3` | \4 |"

# signal row
# param 1: id
# param 2: instance
# param 3: args
# param 4: return type
# param 5: description
ALIASES += signal_row_manual{5}="| `\1` | `(\2*, \3, \Data_t) ->\4` |\5 |"

ALIASES += signal_activate{1}="\signal_row{activate,\1,void,Widget is activated}"

ALIASES += signal_startup{1}="\signal_row{startup,\1,void,todo}"

ALIASES += signal_shutdown{1}="\signal_row{shutdown,\1,void,todo}"

ALIASES += signal_update{1}="\signal_row{update,\1,void,todo}"

ALIASES += signal_paint{1}="\signal_row{paint,\1,void,todo}"

ALIASES += signal_realize{1}="\signal_row{realize,\1,void,todo}"

ALIASES += signal_unrealize{1}="\signal_row{unrealize,\1,void,todo}"

ALIASES += signal_destroy{1}="\signal_row{destroy,\1,void,todo}"

ALIASES += signal_hide{1}="\signal_row{hide,\1,void,todo}"

ALIASES += signal_show{1}="\signal_row{show,\1,void,todo}"

ALIASES += signal_map{1}="\signal_row{map,\1,void,todo}"

ALIASES += signal_unmap{1}="\signal_row{unmap,\1,void,todo}"

ALIASES += signal_close_request{1}="\signal_row{close_request,\1,WindowCloseRequestResult,todo}"

ALIASES += signal_activate_default_widget{1}="\signal_row{activate_default_widget,\1,void,todo}"

ALIASES += signal_activate_focused_widget{1}="\signal_row{activate_focuses_widget,\1,void,todo}"

ALIASES += signal_clicked{1}="\signal_row{clicked,\1,void,todo}"

ALIASES += signal_toggled{1}="\signal_row{toggled,\1,void,todo}"

ALIASES += signal_changed{1}="\signal_row{changed,\1,void,todo}"

ALIASES += signal_undo{1}="\signal_row{undo,\1,void,todo}"

ALIASES += signal_redo{1}="\signal_row{redo,\1,void,todo}"

ALIASES += signal_selection_changed{1}="\signal_row_manual{selection_changed,\1,int32_t position\, int32_t n_items,void,todo}"

ALIASES += signal_key_pressed{1}="\signal_row_manual{key_pressed,\1,KeyValue keyval\, KeyCode keycode\, ModifierState modifier,bool,todo}"

ALIASES += signal_key_released{1}="\signal_row_manual{key_released,\1,KeyValue keyval\, KeyCode keycode\, ModifierState modifier,void,todo}"

ALIASES += signal_modifiers_changed{1}="\signal_row_manual{modifiers_changed,\1,KeyValue keyval\, KeyCode keycode\, ModifierState modifier,bool,todo}"

ALIASES += signal_motion_enter{1}="\signal_row_manual{motion_enter,\1,void,double x\, double y,todo}"

ALIASES += signal_motion{1}="\signal_row_manual{motion,\1,void,double x\, double y,todo}"

ALIASES += signal_motion_leave{1}="\signal_row{motion_leave,\1,void,todo}"

ALIASES += signal_click_pressed{1}="\signal_row_manual{click_pressed,\1,void,int32_t n_press\, double x\, double y,todo}"

ALIASES += signal_click_released{1}="\signal_row_manual{click_released,\1,void,int32_t n_press\, double x\, double y,todo}"

ALIASES += signal_stopped{1}="\signal_row{stopped,\1,void,todo}"

ALIASES += signal_kinetic_scroll_decelerate{1}="\signal_row_manual{signal_kinetic_scroll_decelerate,\1,void,double x_velocity\, double y_velocity,todo}"

ALIASES += signal_scroll_begin{1}="\signal_row{scroll_begin,\1,void,todo}"

ALIASES += signal_scroll{1}="\signal_row_manual{scroll,\1,bool,double delta_x\, double delta_y,todo}"

ALIASES += signal_scroll_end{1}="\signal_row{scroll_end,\1,void,todo}"

ALIASES += signal_focus_gained{1}="\signal_row{focus_gained,\1,void,todo}"

ALIASES += signal_focus_lost{1}="\signal_row{focus_lost,\1,void,todo}"

ALIASES += signal_drag_begin{1}="\signal_row_manual{drag_begin,\1,void,double start_x\, double start_y,todo}"

ALIASES += signal_drag_update{1}="\signal_row_manual{drag,\1,void,double offset_x\, double offset_y,todo}"

ALIASES += signal_drag_end{1}="\signal_row_manual{drag_end,\1,void,double offset_x\, double offest_y,todo}"

ALIASES += signal_scale_changed{1}="\signal_row_manual{scale_changed,\1,void,double scale,todo}"

ALIASES += signal_rotation_changed{1}="\signal_row_manual{rotation_changed,\1,void,double angle_absolute_radians\, double angle_delta_radians,todo}"

ALIASES += signal_text_changed{1}="\signal_row{text_changed,\1,void,todo}"

ALIASES += signal_value_changed{1}="\signal_row{value_changed,\1,void,todo}"

ALIASES += signal_render{1}="\signal_row_manual{render,\1,bool, GdkGLContext* context, context}"

ALIASES += signal_resize{1}="\signal_row_manual{resize,\1,void,int32_t width\, int32_t height,todo}"

ALIASES += signal_page_added{1}="\signal_row_manual{page_added,\1,void,void* _\, uint32_t page_index,todo}"

ALIASES += signal_page_removed{1}="\signal_row_manual{page_removed,\1,void,void* _\, uint32_t page_index,todo}"

ALIASES += signal_page_reordered{1}="\signal_row_manual{page_reordered,\1,void,void* _\, uint32_t page_index,todo}"

ALIASES += signal_page_selection_changed{1}="\signal_row_manual{page_selection_changed,\1,void,void* _\, uint32_t page_index,todo}"

ALIASES += signal_wrapped{1}="\signal_row{wrapped,\1,void,todo}"

ALIASES += signal_response{1}="\signal_row_manual{response,\1,void, int response, response}"

ALIASES += signal_pressed{1}="\signal_row_manual{pressed,\1,void,double x\, double y,todo}"

ALIASES += signal_press_cancelled{1}="\signal_row{press_cancelled,\1,void,todo}"

ALIASES += signal_pan{1}="\signal_row_manual{pan,\1,void,PanDirection direction\, double offset,todo}"

ALIASES += signal_swipe{1}="\signal_row_manual{swipe,\1,void,double x_velocity\, double y_velocity,todo}"

ALIASES += signal_stylus_down{1}="\signal_row_manual{stylus_down,\1,void,double x\, double y,todo}"

ALIASES += signal_stylus_up{1}="\signal_row_manual{stylus_up,\1,void,double x\, double y,todo}"

ALIASES += signal_proximity{1}="\signal_row_manual{proximity,\1,void,double x\, double y,todo}"

ALIASES += signal_scroll_child{1}="\signal_row_manual{scroll_child,\1,void,ScrollType scroll_type\, bool is_horizontal,todo}"

ALIASES += signal_closed{1}="\signal_row{closed,\1,void,todo}"

ALIASES += signal_play{1}="\signal_row{play,\1,void,todo}"

ALIASES += signal_stop{1}="\signal_row{stop,\1,void,todo}"

ALIASES += signal_items-changed{1}="\signal_row_manual{items_changed,\1,void,int32_t scroll_type\, int32_t n_removed\, int32_t n_added,todo}"

ALIASES += widget_signals{1}="|**Signals inherited from Widget:**|||^^\signal_realize{\1}^^\signal_unrealize{\1}^^\signal_destroy{\1}^^\signal_hide{\1}^^\signal_show{\1}^^\signal_map{\1}^^\signal_unmap{\1}"

ALIASES += signal_revealed{1}="\signal_row_manual{revealed,\1,void,void* _,todo}"

### C++ CODE USAGE ###

# internal
ALIASES += internal="(for internal use only)"

# only_used_in_julia_binding
ALIASES += only_used_in_julia_binding="placeholder. Only used in Julia binding"

# signal_class_name
# param 1: signal name
ALIASES += signal_class_name{1}="has_signal\_\1"

# signal_with_data_f
# param 1: signal name
ALIASES += signal_with_data_f{1}="@brief expected signature of signal handler, forwards user-supplied data to function"

# signal_without_data_f
# param 1: signal name
ALIASES += signal_without_data_f{1}="@brief expected signature of signal handler"

# signal_see_emit_for_parameters
# param 1: signal name
ALIASES += signal_see_emit_for_parameters{1}="@see has_signal\_\1::emit_signal\_\1 for more information on signal handler arguments"

# signal_emit_brief
ALIASES += signal_emit_brief="@brief invoke signal handler manually"

# signal_id
# param 1: linke to gtk docs
ALIASES += signal_id{1}="@brief glib ID \internal^^@see \1"

# signal_connect_no_data
ALIASES += signal_connect{1}="@brief connect handler, will be invoked when signal is emitted^^@param f function with signature `\1`"

# signal_connect_data @brief
ALIASES += signal_connect_data{1}="@brief connect handler, will be invoked when signal is emitted. Data is passed to the signal handler function^^@param f function with signature `\1`^^@param data arbitrary data"

# signal_set_blocked
ALIASES += signal_set_blocked="^^@brief Set whether signal emission should trigger the signal handler^^@param b true if handler should be blocked, false otherwise"

# signal_get_blocked
ALIASES += signal_get_blocked="^^@brief get whether signal emission should trigger the signal handler^^@return true if handle is blocked, false otherwise"

# signal_disconnect
ALIASES += signal_disconnect="^^@brief disconnect the signal handler"

# signal_ctor
ALIASES += signal_ctor="@brief ctor protected \internal"

### MANUAL USAGE ###

# C++ Code Collapsible Region, uses Highligh.js for syntax highlighting by designating inside as snippet
ALIASES += cpp_code_begin"<div class\=\"cpp-code\"><details><summary>C++</summary>^^<div class=\"snippet\">"
ALIASES += cpp_code_end="</div></details></div>"

# Julia Code Collapsible Region, uses Highligh.js for syntax highlighting by designating inside as snippet
ALIASES += julia_code_begin="^^<div class\=\"julia-code\"><details><summary>Julia</summary>^^<div class=\"snippet\">"
ALIASES += julia_code_end="</div></details></div>"
ALIASES += julia_todo="\todo implement this^^<br>"

# Hint Collapsible Region
ALIASES += hint_begin="^^<div class\=\"hint\"><details><summary>Hint</summary>^^"
ALIASES += hint_end="</details></div>"

# incomplete sections
ALIASES += not_yet_complete="\todo this section is not yet complete"

# collapsible note
ALIASES += collapsible_note_begin="\note <details><summary>click to expand</summary>"
ALIASES += collapsible_note_end="</details>"