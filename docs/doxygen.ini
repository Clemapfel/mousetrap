### C++ CODE USAGE ###

# internal
ALIASES += internal="(for internal use only)"

# only_used_in_julia_binding
ALIASES += only_used_in_julia_binding="placeholder. Only used in Julia binding"

# signal_class_name
# param 1: signal name
ALIASES += signal_class_name{1}="has_signal\_\1"

# signal_with_data_f
# param 1: signal name
ALIASES += signal_with_data_f{1}="@brief expected signature of signal handler, forwards user-supplied data to function"

# signal_without_data_f
# param 1: signal name
ALIASES += signal_without_data_f{1}="@brief expected signature of signal handler"

# signal_see_emit_for_parameters
# param 1: signal name
ALIASES += signal_see_emit_for_parameters{1}="@see has_signal\_\1::emit_signal\_\1 for more information on signal handler arguments"

# signal_emit_brief
ALIASES += signal_emit_brief="@brief invoke signal handler manually"

# signal_id
# param 1: linke to gtk docs
ALIASES += signal_id{1}="@brief glib ID \internal^^@see \1"

# signal_connect_no_data
ALIASES += signal_connect{1}="@brief connect handler, will be invoked when signal is emitted^^@param f function with signature `\1`"

# signal_connect_data @brief
ALIASES += signal_connect_data{1}="@brief connect handler, will be invoked when signal is emitted. Data is passed to the signal handler function^^@param f function with signature `\1`^^@param data arbitrary data"

# signal_set_blocked
ALIASES += signal_set_blocked="^^@brief Set whether signal emission should trigger the signal handler^^@param b true if handler should be blocked, false otherwise"

# signal_get_blocked
ALIASES += signal_get_blocked="^^@brief get whether signal emission should trigger the signal handler^^@return true if handle is blocked, false otherwise"

# signal_disconnect
ALIASES += signal_disconnect="^^@brief disconnect the signal handler"

# signal_ctor
ALIASES += signal_ctor="@brief ctor protected \internal"

### MANUAL USAGE ###

# C++ Code Collapsible Region, uses Highligh.js for syntax highlighting by designating inside as snippet
ALIASES += cpp_code_begin"<div class\=\"cpp-code\"><details><summary>C++</summary>^^<div class=\"snippet\">"
ALIASES += cpp_code_end="</div></details></div>"

# Julia Code Collapsible Region, uses Highligh.js for syntax highlighting by designating inside as snippet
ALIASES += julia_code_begin="^^<div class\=\"julia-code\"><details><summary>Julia</summary>^^<div class=\"snippet\">"
ALIASES += julia_code_end="</div></details></div>"
ALIASES += julia_todo="\todo implement this^^<br>"

# Hint Collapsible Region
ALIASES += hint_begin="^^<div class\=\"hint\"><details><summary>Hint</summary>^^"
ALIASES += hint_end="</details></div>"

# note to implement julia version of this
#ALIASES += julia_todo="\todo implement julia version"